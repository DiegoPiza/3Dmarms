function [trainedClassifier, validationAccuracy] = trainClassifierview(trainingData, responseData)
    % Create an SVM template for classification
    template = templateSVM(...
        'KernelFunction', 'linear', ...
        'PolynomialOrder', [], ...
        'KernelScale', 'auto', ...
        'BoxConstraint', 1, ...
        'Standardize', true);
    
    % Train a multiclass SVM classifier using fitcecoc
    classificationSVM = fitcecoc(...
        trainingData, ...
        responseData, ...
        'Learners', template, ...
        'Coding', 'onevsone', ...
        'ClassNames', categorical({'1'; '2'; '3'; '4'; '5'; '6'}));
    
    % Store the trained classifier in a struct
    trainedClassifier.ClassificationSVM = classificationSVM;

    % Perform cross-validation using 5-fold
    partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);

    % Compute predictions and scores for validation
    [validationPredictions, validationScores] = kfoldPredict(partitionedModel);

    % Compute validation accuracy based on classificaion error
    validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
end
